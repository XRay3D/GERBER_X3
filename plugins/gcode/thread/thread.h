/*******************************************************************************
 * Author    :  Damir Bakiev                                                    *
 * Version   :  na                                                              *
 * Date      :  March 25. 2023                                                  *
 * Website   :  na                                                              *
 * Copyright :  Damir Bakiev 2016-2023                                          *
 * License   :                                                                  *
 * Use. modification & distribution is subject to Boost Software License Ver 1. *
 * http://www.boost.org/LICENSE_1_0.txt                                         *
 *******************************************************************************/
#pragma once

#include "gc_creator.h"
#include "gc_file.h"

#include <QIcon>
#include <QPixmap>

namespace Thread {

struct Thread_ {
    // 4.2 Значения диаметров вычисляют по формулам:
    // D2 = D - 2 x  3/8 H  = D - 0.6495 Р
    // d2 = d - 2 x  3/8 H  = d - 0.6495 P
    // D1 = D - 2 x  5/8 H  = D - 1.0825 P
    // d1 = d - 2 x  5/8 H  = d - 1.0825 P
    // d3 = d - 2 x 17/24 H = d - 1.2267 P
    // H = 0.866025404 x P
    double D{};  // Номинальный диаметр резьбы D, наружный диаметр резьбы d
    double P{};  // ШагР
    double D1{}; // Внутренний диаметр D1, d1
    double D2{}; // Средний диаметр D2, d2
    double D3{}; // Внутренний диаметр по дну впадины D3, d3

    auto toObj() const {
        QJsonObject obj;
        obj["D"] = D;   // Номинальный диаметр резьбы D, наружный диаметр резьбы d
        obj["P"] = P;   // ШагР
        obj["D1"] = D1; // Внутренний диаметр D1, d1
        obj["D2"] = D2; // Средний диаметр D2, d2
        obj["D3"] = D3; // Внутренний диаметр по дну впадины D3, d3
        return obj;
    }

    auto toStr() const {
        return QString("M%1x%2").arg(D).arg(P);
    }

    auto& operator=(const QJsonObject& obj) {
        D = obj["D"].toDouble();   // Номинальный диаметр резьбы D, наружный диаметр резьбы d
        P = obj["P"].toDouble();   // ШагР
        D1 = obj["D1"].toDouble(); // Внутренний диаметр D1, d1
        D2 = obj["D2"].toDouble(); // Средний диаметр D2, d2
        D3 = obj["D3"].toDouble(); // Внутренний диаметр по дну впадины D3, d3
        return *this;
    }

    auto operator<=>(const Thread_&) const = default;
};

struct Settings {
    static inline std::vector<Thread_> threads{

        //  Номинальный   |   Шаг Р. мм   |   Диаметры резьбы. мм||   |
        //  диаметр резьбы||||   |
        //  d. мм|   |   d = D   |   d2 = D2   |   d1 = D1   |   d3

        //        {0.25, 0.075,  0.201,  0.169,  0.158},
        //        {0.30,  0.08,  0.248,  0.213,  0.202},
        //        {0.35,  0.09,  0.292,  0.253,  0.240},
        //        {0.40,   0.1,  0.335,  0.292,  0.277},
        //        {0.45,   0.1,  0.385,  0.342,  0.327},
        //        {0.50, 0.125,  0.419,  0.365,  0.347},
        //        {0.55, 0.125,  0.469,  0.415,  0.397},
        //        {0.60,  0.15,  0.503,  0.438,  0.416},
        //        {0.70, 0.175,  0.586,  0.511,  0.485},
        //        {0.80,   0.2,  0.670,  0.583,  0.555},
        //        {0.90, 0.225,  0.754,  0.656,  0.624},
        //        { 1.0,  0.25,  0.838,  0.729,  0.693},
        //        { 1.0,   0.2,  0.870,  0.783,  0.755},
        //        { 1.1,  0.25,  0.938,  0.829,  0.793},
        //        { 1.2,   0.2,  0.970,  0.883,  0.855},
        //        { 1.2,  0.25,  1.038,  0.929,  0.893},
        //        { 1.3,   0.2,  1.070,  0.983,  0.955},
        //        { 1.4,   0.3,  1.205,  1.075,  1.032},
        //        { 1.4,   0.2,  1.270,  1.183,  1.155},
        //        { 1.6,  0.35,  1.373,  1.221,  1.171},
        //        { 1.6,   0.2,  1.470,  1.383,  1.355},
        //        { 1.8,  0.35,  1.573,  1.421,  1.371},
        //        { 1.8,   0.2,  1.670,  1.583,  1.555},
        //        { 2.0,   0.4,  1.740,  1.567,  1.509},
        //        { 2.0,  0.25,  1.838,  1.729,  1.693},
        //        { 2.2,  0.45,  1.908,  1.713,  1.648},
        //        { 2.2,  0.25,  2.038,  1.929,  1.893},
        //        { 2.5,  0.45,  2.208,  2.013,  1.948},
        //        { 2.5,  0.35,  2.273,  2.121,  2.071},
        //        { 3.0,   0.5,  2.675,  2.459,  2.387},
        //        { 3.0,  0.35,  2.773,  2.621,  2.571},
        //        { 3.5,   0.6,  3.110,  2.850,  2.764},
        //        { 3.5,  0.35,  3.273,  3.121,  3.071},
        //        { 4.0,   0.7,  3.545,  3.242,  3.141},
        //        { 4.0,   0.5,  3.675,  3.459,  3.387},
        //        { 4.5,  0.75,  4.013,  3.688,  3.580},
        //        { 4.5,   0.5,  4.175,  3.959,  3.887},
        //        { 5.0,   0.8,  4.480,  4.134,  4.019},
        //        { 5.0,   0.5,  4.675,  4.459,  4.387},
        //        { 5.5,   0.5,  5.175,  4.959,  4.887},
        //        {  6.,     1,  5.350,  4.917,  4.773},
        //        {  6.,  0.75,  5.513,  5.188,  5.080},
        //        {  6.,   0.5,  5.675,  5.459,  5.387},
        //        {  7.,     1,  6.350,  5.917,  5.773},
        //        {  7.,  0.75,  6.513,  6.188,  6.080},
        //        {  7.,   0.5,  6.675,  6.459,  6.387},
        //        {  8.,  1.25,  7.188,  6.647,  6.466},
        //        {  8.,     1,  7.350,  6.917,  6.773},
        //        {  8.,  0.75,  7.513,  7.188,  7.080},
        //        {  8.,   0.5,  7.675,  7.459,  7.387},
        //        {  9.,  1.25,  8.188,  7.647,  7.466},
        //        {  9.,     1,  8.350,  7.917,  7.773},
        //        {  9.,  0.75,  8.513,  8.188,  8.080},
        //        {  9.,   0.5,  8.675,  8.459,  8.387},
        //        {  10,   1.5,  9.026,  8.376,  8.160},
        //        {  10,  1.25,  9.188,  8.647,  8.466},
        //        {  10,     1,  9.350,  8.917,  8.773},
        //        {  10,  0.75,  9.513,  9.188,  9.080},
        //        {  10,   0.5,  9.675,  9.459,  9.387},
        //        {  11,   1.5, 10.026,  9.376,  9.160},
        //        {  11,     1, 10.350,  9.917,  9.773},
        //        {  11,  0.75, 10.513, 10.188, 10.080},
        //        {  11,   0.5, 10.675, 10.459, 10.387},
        //        {  12,  1.75, 10.863, 10.106,  9.853},
        //        {  12,   1.5, 11.026, 10.376, 10.160},
        //        {  12,  1.25, 11.188, 10.647, 10.466},
        //        {  12,     1, 11.350, 10.917, 10.773},
        //        {  12,  0.75, 11.513, 11.188, 11.080},
        //        {  12,   0.5, 11.675, 11.459, 11.387},
        //        {  14,     2, 12.701, 11.835, 11.546},
        //        {  14,   1.5, 13.026, 12.376, 12.160},
        //        {  14,  1.25, 13.188, 12.647, 12.466},
        //        {  14,     1, 13.350, 12.917, 12.773},
        //        {  14,  0.75, 13.513, 13.188, 13.080},
        //        {  14,   0.5, 13.675, 13.459, 13.387},
        //        {  15,   1.5, 14.026, 13.376, 13.160},
        //        {  15,     1, 14.350, 13.917, 13.773},
        //        {  16,     2, 14.701, 13.835, 13.546},
        //        {  16,   1.5, 15.026, 14.376, 14.160},
        //        {  16,     1, 15.350, 14.917, 14.773},
        //        {  16,  0.75, 15.513, 15.188, 15.080},
        //        {  16,   0.5, 15.675, 15.459, 15.387},
        //        {  17,   1.5, 16.026, 15.376, 15.160},
        //        {  17,     1, 16.350, 15.917, 15.773},
        //        {  18,   2.5, 16.376, 15.294, 14.933},
        //        {  18,     2, 16.701, 15.835, 15.546},
        //        {  18,   1.5, 17.026, 16.376, 16.160},
        //        {  18,     1, 17.350, 16.917, 16.773},
        //        {  18,  0.75, 17.518, 17.188, 17.080},
        //        {  18,   0.5, 17.675, 17.459, 17.387},
        //        {  20,   2.5, 18.376, 17.294, 16.933},
        //        {  20,     2, 18.701, 17.835, 17.546},
        //        {  20,   1.5, 19.026, 18.376, 18.160},
        //        {  20,     1, 19.350, 18.917, 18.773},
        //        {  20,  0.75, 19.513, 19.188, 19.080},
        //        {  20,   0.5, 19.675, 19.459, 19.387},
        //        {  22,   2.5, 20.376, 19.294, 18.933},
        //        {  22,     2, 20.701, 19.835, 19.546},
        //        {  22,   1.5, 21.026, 20.376, 20.160},
        //        {  22,     1, 21.350, 20.917, 20.773},
        //        {  22,  0.75, 21.513, 21.188, 21.080},
        //        {  22,   0.5, 21.675, 21.459, 21.387},
        //        {  24,     3, 22.051, 20.752, 20.319},
        //        {  24,     2, 22.701, 21.835, 21.546},
        //        {  24,   1.5, 23.026, 22.376, 22.160},
        //        {  24,     1, 23.350, 22.917, 22.773},
        //        {  24,  0.75, 23.513, 23.188, 23.080},
        //        {  25,     2, 23.701, 22.835, 22.546},
        //        {  25,   1.5, 24.026, 23.376, 23.160},
        //        {  25,     1, 24.350, 23.917, 23.773},
        //        {  26,   1.5, 25.026, 24.376, 24.160},
        //        {  27,     3, 25.051, 23.752, 23.319},
        //        {  27,     2, 25.701, 24.835, 24.546},
        //        {  27,   1.5, 26.026, 25.376, 25.160},
        //        {  27,     1, 26.350, 25.917, 25.773},
        //        {  27,  0.75, 26.513, 26.188, 26.080},
        //        {  28,     2, 26.701, 25.835, 25.546},
        //        {  28,   1.5, 27.026, 26.376, 26.160},
        //        {  28,     1, 27.350, 26.917, 26.773},
        //        {  30,   3.5, 27.727, 26.211, 25.706},
        //        {  30,     3, 28.051, 26.752, 26.319},
        //        {  30,     2, 28.701, 27.835, 27.546},
        //        {  30,   1.5, 29.026, 28.376, 28.160},
        //        {  30,     1, 29.350, 28.917, 28.773},
        //        {  30,  0.75, 29.513, 29.188, 29.080},
        //        {  32,     2, 30.701, 29.835, 29.546},
        //        {  32,   1.5, 31.026, 30.376, 30.160},
        //        {  33,   3.5, 30.727, 29.211, 28.706},
        //        {  33,     3, 31.051, 29.752, 29.319},
        //        {  33,     2, 31.701, 30.835, 30.546},
        //        {  33,   1.5, 32.026, 31.376, 31.160},
        //        {  33,     1, 32.350, 31.917, 31.773},
        //        {  33,  0.75, 32.513, 32.188, 32.080},
        //        {  35,   1.5, 34.026, 33.376, 33.160},
        //        {  36,     4, 33.402, 31.670, 31.093},
        //        {  36,     3, 34.051, 32.752, 32.319},
        //        {  36,     2, 34.701, 33.835, 33.546},
        //        {  36,   1.5, 35.026, 34.376, 34.160},
        //        {  36,     1, 35.350, 34.917, 34.773},
        //        {  38,   1.5, 37.026, 36.376, 36.160},
        //        {  39,     4, 36.402, 34.670, 34.093},
        //        {  39,     3, 37.051, 35.752, 35.319},
        //        {  39,     2, 37.701, 36.835, 36.546},
        //        {  39,   1.5, 38.026, 37.376, 37.160},
        //        {  39,     1, 38.350, 37.917, 37.773},
        //        {  40,     3, 38.051, 36.752, 36.319},
        //        {  40,     2, 38.701, 37.835, 37.546},
        //        {  40,   1.5, 39.026, 38.376, 38.160},
        //        {  42,   4.5, 39.077, 37.129, 36.479},
        //        {  42,     4, 39.402, 37.670, 37.093},
        //        {  42,     3, 40.051, 38.752, 38.319},
        //        {  42,     2, 40.701, 39.835, 39.546},
        //        {  42,   1.5, 41.026, 40.376, 40.160},
        //        {  42,     1, 41.350, 40.917, 40.773},
        //        {  45,   4.5, 42.077, 40.129, 39.479},
        //        {  45,     4, 42.402, 40.670, 40.093},
        //        {  45,     3, 43.051, 41.752, 41.319},
        //        {  45,     2, 43.701, 42.835, 42.546},
        //        {  45,   1.5, 44.026, 43.376, 43.160},
        //        {  45,     1, 44.350, 43.917, 43.773},
        //        {  48,     5, 44.752, 42.587, 41.866},
        //        {  48,     4, 45.402, 43.670, 43.093},
        //        {  48,     3, 46.051, 44.752, 44.319},
        //        {  48,     2, 46.701, 45.835, 45.516},
        //        {  48,   1.5, 47.026, 46.376, 46.160},
        //        {  48,     1, 47.350, 46.917, 46.773},
        //        {  50,     3, 48.051, 46.752, 46.319},
        //        {  50,     2, 48.701, 47.835, 47.546},
        //        {  50,   1.5, 49.026, 48.376, 48.160},
        //        {  52,     5, 48.752, 46.587, 45.866},
        //        {  52,     4, 49.402, 47.670, 47.093},
        //        {  52,     3, 50.051, 48.752, 48.319},
        //        {  52,     2, 50.701, 49.835, 49.546},
        //        {  52,   1.5, 51.026, 50.376, 50.160},
        //        {  52,     1, 51.350, 50.917, 50.773},
        //        {  55,     4, 52.402, 50.670, 50.093},
        //        {  55,     3, 53.051, 51.752, 51.319},
        //        {  55,     2, 53.701, 52.835, 52.546},
        //        {  55,   1.5, 54.026, 53.376, 53.160},
        //        {  56,   5.5, 52.428, 50.046, 49.253},
        //        {  56,     4, 53.402, 51.670, 51.093},
        //        {  56,     3, 54.051, 52.752, 52.319},
        //        {  56,     2, 54.701, 53.835, 53.546},
        //        {  56,   1.5, 55.026, 54.376, 54.160},
        //        {  56,     1, 55.350, 54.917, 54.773},
        //        {  58,     4, 55.402, 53.670, 53.093},
        //        {  58,     3, 56.051, 54.752, 54.319},
        //        {  58,     2, 56.701, 55.835, 55.546},
        //        {  58,   1.5, 57.026, 56.376, 56.160},
        //        {  60,   5.5, 56.428, 54.046, 53.252},
        //        {  60,     4, 57.402, 55.670, 55.093},
        //        {  60,     3, 58.051, 56.752, 56.319},
        //        {  60,     2, 58.701, 57.835, 57.546},
        //        {  60,   1.5, 59.026, 58.376, 58.160},
        //        {  60,     1, 59.350, 58.917, 58.773},
        //        {  62,     4, 59.402, 57.670, 57.093},
        //        {  62,     3, 60.051, 58.752, 58.319},
        //        {  62,     2, 60.701, 59.835, 59.546},
        //        {  62,   1.5, 61.026, 60.376, 60.160},
        //        {  64,     6, 60.103, 57.505, 56.639},
        //        {  64,     4, 61.402, 59.670, 59.093},
        //        {  64,     3, 62.051, 60.752, 60.319},
        //        {  64,     2, 62.701, 61.835, 61.546},
        //        {  64,   1.5, 63.026, 62.376, 62.160},
        //        {  64,     1, 63.350, 62.917, 62.773},
        //        {  65,     4, 62.402, 60.670, 60.093},
        //        {  65,     3, 63.051, 61.752, 61.319},
        //        {  65,     2, 63.701, 62.835, 62.546},
        //        {  65,   1.5, 64.026, 63.376, 63.160},
        //        {  68,     6, 64.103, 61.505, 60.639},
        //        {  68,     4, 64.402, 63.670, 63.093},
        //        {  68,     3, 66.051, 64.752, 64.319},
        //        {  68,     2, 66.701, 65.835, 65.546},
        //        {  68,   1.5, 67.026, 66.376, 66.160},
        //        {  68,     1, 67.350, 66.917, 66.773},
        //        {  70,     6, 66.103, 63.505, 62.639},
        //        {  70,     4, 67.402, 65.670, 65.093},
        //        {  70,     3, 68.051, 66.752, 66.319},
        //        {  70,     2, 68.701, 67.835, 67.546},
        //        {  70,   1.5, 69.026, 68.376, 68.160},
        //        {  72,     6, 68.103, 65.505, 64.639},
        //        {  72,     4, 69.402, 67.670, 67.093},
        //        {  72,     3, 70.051, 68.752, 68.319},
        //        {  72,     2, 70.701, 69.835, 69.546},
        //        {  72,   1.5, 71.026, 70.376, 70.160},
        //        {  72,     1, 71.350, 70.917, 70.773},
        //        {  75,     4, 72.402, 70.670, 70.093},
        //        {  75,     3, 73.051, 71.752, 71.319},
        //        {  75,     2, 73.701, 72.835, 72.546},
        //        {  75,   1.5, 74.026, 73.376, 73.160},
        //        {  76,     6, 72.103, 69.505, 68.639},
        //        {  76,     4, 73.402, 71.670, 71.093},
        //        {  76,     3, 74.051, 72.752, 72.319},
        //        {  76,     2, 74.701, 73.835, 73.546},
        //        {  76,   1.5, 75.026, 74.376, 74.160},
        //        {  76,     1, 75.350, 74.917, 74.773},
        //        {  78,     2, 76.701, 75.835, 75.546},
        //        {  80,     6, 76.103, 73.505, 72.639},
        //        {  80,     4, 77.402, 75.670, 75.093},
        //        {  80,     3, 78.051, 76.752, 76.319},
        //        {  80,     2, 78.701, 77.835, 77.546},
        //        {  80,   1.5, 79.026, 78.376, 78.160},
        //        {  80,     1, 79.350, 78.917, 78.773},
    };
};

inline Settings settings;

inline constexpr auto THREAD = md5::hash32("Thread");

class File final : public GCode::File {
public:
    explicit File();
    explicit File(GCode::Params&& gcp, Pathss&& toolPathss);
    QIcon icon() const override { return QIcon::fromTheme("crosshairs"); } // FIXME
    uint32_t type() const override { return THREAD; }
    void createGi() override;
    void genGcodeAndTile() override;
}; // File

class Creator : public GCode::Creator {

public:
    Creator() = default;
    ~Creator() override = default;

    enum {
        BridgeLen = GCode::Params::UserParam,
        TrimmingCorners,
        TrimmingOpenPaths,
        BridgeAlignType,
        BridgeValue,
        BridgeValue2,
    };

private:
    void createThread(const Tool& tool, const double depth);

protected:
    void create() override; // Creator interface
    uint32_t type() override { return THREAD; }
    bool possibleTest() const override { return true; }
};

} // namespace Thread
